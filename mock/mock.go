// Code generated by MockGen. DO NOT EDIT.
// Source: ../core.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// OauthClient is a mock of OauthClient interface
type OauthClient struct {
	ctrl     *gomock.Controller
	recorder *OauthClientMockRecorder
}

// OauthClientMockRecorder is the mock recorder for OauthClient
type OauthClientMockRecorder struct {
	mock *OauthClient
}

// NewOauthClient creates a new mock instance
func NewOauthClient(ctrl *gomock.Controller) *OauthClient {
	mock := &OauthClient{ctrl: ctrl}
	mock.recorder = &OauthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *OauthClient) EXPECT() *OauthClientMockRecorder {
	return m.recorder
}

// Account mocks base method
func (m *OauthClient) Account(ctx context.Context, code string) (int, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account", ctx, code)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Account indicates an expected call of Account
func (mr *OauthClientMockRecorder) Account(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*OauthClient)(nil).Account), ctx, code)
}
